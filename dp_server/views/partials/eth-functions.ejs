<script>
    //Solidity functions transfer to promises.
    async function eth_checkInputData(deviceId, latitude, longitude, time, speedType) {
        return new Promise((resolve, reject) => {
            contract.checkInputData.call(deviceId, latitude, longitude, time, speedType, (error, result) => {
                if (error) {
                    reject(error);
                }
                resolve(result);
            });
        });
    }

    async function eth_checkOutsideInputData(speedType, latitude1, longitude1, time1, latitude2, longitude2, time2) {
        return new Promise((resolve, reject) => {
            contract.checkOutsideInputData.call(speedType, latitude1, longitude1, time1, latitude2, longitude2, time2, (error, result) => {
                if (error) {
                    reject(error);
                }
                resolve(result);
            });
        });
    }

    async function eth_saveData(deviceid, latitude, longitude, time, note) {
        return new Promise((resolve, reject) => {
            contract.saveData.sendTransaction(deviceid, latitude, longitude, time, note, transaction_config, (error, result) => {
                if (error) {
                    reject(error);
                }
                resolve(result);
            });
        });
    }

    async function eth_getDataCount(deviceid, timeFrom, timeTo) {
        return new Promise((resolve, reject) => {
            contract.getDataCount.call(deviceid, timeFrom, timeTo, transaction_config, (error, result) => {
                if (error) {
                    reject(error);
                }
                resolve(result);
            });
        });
    }

    async function eth_getDataWithSpeedCheck(deviceid, index, timeFrom, timeTo, speedType) {
        return new Promise((resolve, reject) => {
            contract.getDataWithSpeedCheck.call(deviceid, index, timeFrom, timeTo, speedType, transaction_config, (error, result) => {
                if (error) {
                    reject(error);
                }
                resolve(result);
            });
        });
    }

    async function eth_getDataCountWithSpeedCheck(deviceid, timeFrom, timeTo, speed) {
        return new Promise((resolve, reject) => {
            contract.getDataCountWithSpeedCheck.call(deviceid, timeFrom, timeTo, speed, transaction_config, (error, result) => {
                if (error) {
                    reject(error);
                }
                resolve(result);
            });
        });
    }


    //Converts solidity coordinates to normal coordinate values.
    function ethCoordToJs(value) {
        return value / 100000;
    }

    //Converts solidity time to javascript Date.
    function ethTimeToJs(value) {
        return new Date(value * 1000);
    }
    
    // Transfers solidity big number to js number.
    // This is not the best solution. It may cause some problems with very big numbers. For our case if user will have just few thousands of records for one deviceId is ok.
    // https://github.com/ethereum/web3.js/issues/356
    function getUint(value) {
        return value.c[0];
    }

    //Transfers time from js to solidity int.
    function transferTimeToInt(value) {
        return Math.round(new Date(value).getTime() / 1000);
    }
</script>